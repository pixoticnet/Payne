name: Payne CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - '*'
  schedule:
    # run at 10AM & 10PM UTC
    - cron:  '0 10,22 * * *'

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libjavascriptcoregtk-4.0-dev
      - uses: actions/checkout@v2
      - run: swift test

  iOS:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - run: |
            xcodebuild clean test \
              -scheme "Payne" \
              -sdk "iphonesimulator14.4" \
              -destination "OS=14.4,name=iPhone 12 Mini" \
              ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

  tvOS:
    runs-on: macos-latest
    needs: [iOS] # iOS must pass first

    steps:
      - uses: actions/checkout@v2
      - run: |
            xcodebuild clean test \
              -scheme "Payne" \
              -sdk "appletvsimulator14.3" \
              -destination "OS=14.3,name=Apple TV" \
              ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

  macOS10:
    runs-on: macos-10.15
    needs: [Linux] # Linux must pass first
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: swift test

  Windows10:
    if: false # JavaScriptCore not available on Windows
    needs: [Linux] # Linux must pass first
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install JavaScriptCore.dll
        run: |
          Install-Binary -Url "https://secure-appldnld.apple.com/itunes12/001-97787-20210421-F0E5A3C2-A2C9-11EB-A40B-A128318AD179/iTunes64Setup.exe" -Name "iTunes64Setup.exe" -ArgumentList ("-q")


      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: Install Install swift-5.4-RELEASE
        run: |
          Install-Binary -Url "https://swift.org/builds/swift-5.4-release/windows10/swift-5.4-RELEASE/swift-5.4-RELEASE-windows10.exe" -Name "installer.exe" -ArgumentList ("-q")
      - name: Set Environment Variables
        run: |
          echo "SDKROOT=C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "DEVELOPER_DIR=C:\Library\Developer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Adjust Paths
        run: |
          echo "C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Supporting Files
        run: |
          Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
          Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"

      - name: Swift Version
        run: swift --version
      - name: Build (Debug)
        run: swift build -v -c debug
      - name: Build (Release)
        run: swift build -v -c release
      - name: Test (Debug)
        run: swift test -v --configuration debug --enable-test-discovery
      - name: Test (Release)
        run: swift test -v --configuration release -Xswiftc -enable-testing --enable-test-discovery

  Release:
    runs-on: ubuntu-latest
    needs: [Linux, macOS10, iOS, tvOS]

    steps:
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            CHANGELOG.md
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

